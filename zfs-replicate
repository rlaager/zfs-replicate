#!/usr/bin/python3
# vim: ai ts=4 sts=4 et sw=4

# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public
# License along with this package; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor,
# Boston, MA  02110-1301 USA

# pylint: disable=invalid-name
# pylint: disable=missing-docstring
# pylint: disable=too-many-arguments
# pylint: disable=too-many-branches
# pylint: disable=too-many-locals
# pylint: disable=too-many-statements

import argparse
import re
import subprocess
import sys

ENCRYPTION_PROPERTIES = (
    'encryption',
    'keyformat',
    'keylocation',
    'pbkdf2iters',
)

def check_output_ssh(host, command, **kw):
    if host == "":
        return subprocess.check_output(command, **kw)
    command = ["ssh", host] + command
    return subprocess.check_output(command, **kw)

def chunks(items, n):
    items = list(items)
    for i in range(0, len(items), n):
        yield items[i:(i + n)]

def delete_snapshots(
        source_snapshots_filtered, destination_host, destination_filesystem,
        destination_snapshots, delete_excluded, dry_run, snapshot_filter,
        term_encoding, verbose):

    snapshots_to_delete = None
    if delete_excluded:
        snapshots_to_delete = \
            set(destination_snapshots) - \
            set(source_snapshots_filtered)
    else:
        destination_snapshots_filtered = [x for x in destination_snapshots
                                          if snapshot_filter.match(x)]
        snapshots_to_delete = \
            set(destination_snapshots_filtered) - \
            set(source_snapshots_filtered)
    for snapshots_to_delete_chunk in chunks(snapshots_to_delete, 2000):
        delete_command = ["zfs", "destroy"]
        if dry_run:
            delete_command.append("-n")
        if verbose:
            delete_command.append("-v")
        delete_command.append(
            destination_filesystem + "@" + ",".join(list(
                snapshots_to_delete_chunk)))

        if verbose:
            print(" ".join(delete_command), file=sys.stderr)
        try:
            delete_command_output = check_output_ssh(
                destination_host, delete_command,
                stderr=subprocess.STDOUT).decode(term_encoding)
            if verbose:
                print(delete_command_output)
        except subprocess.CalledProcessError as e:
            delete_command_error = e.output.decode(term_encoding)
            if "could not find any snapshots" not in delete_command_error:
                print(delete_command_error)
    return snapshots_to_delete

def transfer(
        source_host, source_filesystem, destination_host,
        destination_filesystem, send_command, recv_command, dry_run,
        term_encoding, verbose):

    if source_host:
        send_command = f"ssh {source_host} {send_command}"
    if destination_host:
        recv_command = f"ssh {destination_host} {recv_command}"
    send_recv_command = f"{send_command}| {recv_command}"

    if verbose:
        print("")
        print(send_recv_command, file=sys.stderr)

    if dry_run:
        # Only run the send command (which will be in its dry-run mode).
        send_recv_command = send_command

    # Run the actual replication.  If in verbose mode, pass through the
    # output in real time.
    process = subprocess.Popen(
        send_recv_command, shell=True, stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT)
    share_failed = False
    while True:
        nextline = process.stdout.readline().decode(term_encoding)
        if nextline == "" and process.poll() is not None:
            break
        if "share(1M) failed" in nextline:
            share_failed = True
        if verbose:
            sys.stderr.write(nextline)
            sys.stderr.flush()
    output = process.communicate()[0].decode(term_encoding)
    if verbose:
        sys.stderr.write(output)
        sys.stderr.flush()
    if process.returncode != 0 and \
       not share_failed and "share(1M) failed" not in output:
        return (
            f"Failed to replicate {source_host}:{source_filesystem} to "
            f"{destination_host}:{destination_filesystem}")
    return None

def replicate(
        source_host, source_filesystem, destination_host,
        destination_filesystem, delete, delete_before, delete_excluded,
        dry_run, no_mount, snapshot_filter, term_encoding, verbose,
        zfs_send_options, zfs_recv_options):

    error = ""
    successful_transfers = 0

    # Check for an interrupted send/recv.
    if "-s" in zfs_recv_options:
        if verbose:
            print(
                "Checking for interrupted receive on "
                f"{destination_filesystem}", file=sys.stderr)
        try:
            receive_resume_token = check_output_ssh(
                destination_host,
                ["zfs", "get", "-H", "-o", "value", "receive_resume_token",
                 destination_filesystem],
                stderr=subprocess.STDOUT).decode(term_encoding).strip()
        except subprocess.CalledProcessError:
            if verbose:
                print(
                    "Checking for receive_resume_token failed.  Dataset may "
                    "not exist.")
            receive_resume_token = "-"

        if receive_resume_token != "-":
            if '-t' in zfs_send_options:
                send_command = f"zfs send -t {receive_resume_token} "
                if "-e" in zfs_send_options:
                    send_command += "-e "
                if dry_run:
                    send_command += "-n "
                if verbose:
                    send_command += "-v "
                recv_command = f"zfs recv -s {destination_filesystem}"
                error = transfer(
                    source_host, source_filesystem, destination_host,
                    destination_filesystem, send_command, recv_command,
                    dry_run, term_encoding, verbose)
                if error:
                    return (False, successful_transfers, error)
                successful_transfers = successful_transfers + 1
            else:
                # The sender does not support resuming.
                if verbose:
                    print("Aborting interrupted receive.")
                if not dry_run:
                    check_output_ssh(
                        destination_host,
                        ["zfs", "recv", "-A", destination_filesystem])

    if verbose:
        print(
            f"Comparing {source_filesystem} -> {destination_filesystem}",
            file=sys.stderr)

    # Get a list of source snapshots.
    source_zfs_list = check_output_ssh(
        source_host,
        ["zfs", "list", "-Hr", "-t", "snapshot", "-o", "name", "-d", "1",
         source_filesystem]).decode(term_encoding)

    # Put the source snapshots in a nice list, without the dataset name.
    source_snapshots = []
    for line in source_zfs_list.split("\n"):
        try:
            (fs, snapshot) = line.split("@")
            if fs == source_filesystem:
                source_snapshots.append(snapshot)
        except ValueError:
            pass
    # Put the list in newest to oldest order.
    source_snapshots.reverse()

    source_snapshots_filtered = source_snapshots
    if snapshot_filter:
        source_snapshots_filtered = [x for x in source_snapshots
                                     if snapshot_filter.match(x)]

    if not source_snapshots_filtered:
        if verbose:
            print(
                f"Skipping {source_filesystem} as it has no snapshots.",
                file=sys.stderr)
        return (True, successful_transfers, error)

    zfs_initial_recv_options = []
    # Make a copy of the list so we can modify it temporarily.
    zfs_recv_options = list(zfs_recv_options)
    if '-t' not in zfs_send_options:
        zfs_recv_options.remove('-s')
    if no_mount:
        zfs_recv_options.append("-u")
        # Convert canmount=on to canmount=noauto.  Using zfs recv -u is NOT
        # sufficient by itself, as the filesystems would still mount on boot.
        # But even with -o canmount=noauto, we will need -u or they will be
        # mounted immediately (which seems wrong, but whatever).
        source_canmount = check_output_ssh(
            source_host,
            ["zfs", "get", "-H", "-o", "value", "canmount",
             source_filesystem],
            stderr=subprocess.STDOUT).decode(term_encoding).strip()
        if source_canmount == "on":
            zfs_recv_options.append("-o canmount=noauto")

    # Is the source encrypted?
    try:
        source_encryption = check_output_ssh(
            source_host,
            ["zfs", "get", "-H", "-o", "value", "encryption",
             source_filesystem],
            stderr=subprocess.STDOUT).decode(term_encoding).strip()
    except subprocess.CalledProcessError:
        # The source must not support encryption.
        source_encryption = "off"

    # Is the destination encrypted?
    destination_encryption = "off"
    destination_filesystem_tmp = destination_filesystem
    while True:
        try:
            destination_encryption = check_output_ssh(
                destination_host,
                ["zfs", "get", "-H", "-o", "value", "encryption",
                 destination_filesystem_tmp],
                stderr=subprocess.STDOUT).decode(term_encoding).strip()
            break
        except subprocess.CalledProcessError:
            # If it does not exist, check the parent.
            parent = "/".join(
                destination_filesystem_tmp.split("/")[:-1])
            if parent == destination_filesystem_tmp.split:
                break
            destination_filesystem_tmp = parent

    if source_encryption != "off" and destination_encryption == "off":
        print(
            f"{source_filesystem} is encrypted, but the destination is not.",
            file=sys.stderr)
        sys.exit(1)

    if source_encryption != "off":
        # Encryption is incompatible with embedded data.
        # Encryption is incompatible with sending properties.  We emulate
        # this by manually setting the properties on the recv, but remove the
        # encryption properties to use the destination's encryption
        # parameters.
        zfs_send_options = [x for x in zfs_send_options
                            if x not in ['-e', '-p']]
        source_options = check_output_ssh(
            source_host,
            ["zfs", "get", "-H", "-p", "all", source_filesystem],
            stderr=subprocess.STDOUT).decode(term_encoding).strip()
        for line in source_options.split("\n"):
            (_, prop, value, source) = line.split("\t")
            if (source == 'local' and
                    not (prop == 'canmount' and value == "on") and
                    prop not in ENCRYPTION_PROPERTIES):
                zfs_recv_options.extend(["-o", f"{prop}={value}"])
    elif destination_encryption != "off":
        # Encryption is incompatible with embedded data.
        zfs_send_options = [x for x in zfs_send_options if x != '-e']
        # Use the destination's encryption parameters.  This may ONLY be
        # specified for the initial send, not for any incrementals.
        zfs_initial_recv_options.append("-x encryption")

    # Get a list of destination snapshots.
    try:
        destination_zfs_list = check_output_ssh(
            destination_host,
            ["zfs", "list", "-Hr", "-t", "snapshot", "-o", "name", "-d", "1",
             destination_filesystem],
            stderr=subprocess.STDOUT).decode(term_encoding)
    except subprocess.CalledProcessError:
        # We do not want error messages to be treated as snapshot names.
        destination_zfs_list = ""

    destination_snapshots = []
    for line in destination_zfs_list.split("\n"):
        try:
            (fs, snapshot) = line.split("@")
            if fs == destination_filesystem:
                destination_snapshots.append(snapshot)
        except ValueError:
            continue
    # Put the list in newest to oldest order.
    destination_snapshots.reverse()

    most_recent_common_snapshot = None
    for snapshot in destination_snapshots:
        # Find the first common snapshot, which is the most recent, as we are
        # evaluating the destination snapshots from newest to oldest.
        if snapshot in source_snapshots:
            most_recent_common_snapshot = snapshot
            break

    # If we are doing delete_before, then we need to do manual deletions even
    # if there is no snapshot filter.
    if most_recent_common_snapshot and delete and delete_before:
        # Do not delete the most recent common snapshot now, as we need it for
        # incremental sends.
        source_snapshots_filtered_tmp = source_snapshots_filtered
        if most_recent_common_snapshot not in source_snapshots_filtered:
            source_snapshots_filtered_tmp = \
                source_snapshots_filtered + most_recent_common_snapshot

        snapshots_deleted = delete_snapshots(
            source_snapshots_filtered_tmp, destination_host,
            destination_filesystem, destination_snapshots, delete_excluded,
            dry_run, snapshot_filter, term_encoding, verbose)

        # Remove the deleted snapshots so they are not considered further
        # (e.g. by the deletion code at the end).
        destination_snapshots = \
            [x for x in destination_snapshots if x not in snapshots_deleted]

    while most_recent_common_snapshot not in (
            source_snapshots_filtered[0], source_snapshots[0]):

        # There is something to send...

        if most_recent_common_snapshot:
            if (not snapshot_filter) and delete:
                # If there is no filter, we do not need to worry about skipping
                # some intermediate snapshots. We can send a replication stream
                # package all the way to the last snapshot.  A replication
                # stream package (with -F on the receive) also handles
                # deletions.
                next_snapshot = source_snapshots_filtered[0]
            else:
                # Send the next snapshot after the common one.  As the common
                # snapshot may be an excluded snapshot, we have to start with
                # the raw list of snapshots, see what is newer, and then find
                # the next snapshot that matches the filter.
                snapshots_left = source_snapshots[
                    :source_snapshots.index(most_recent_common_snapshot)]
                snapshots_left.reverse()
                for snapshot in snapshots_left:
                    if snapshot in source_snapshots_filtered:
                        next_snapshot = snapshot
                        break
        else:
            # If there is no snapshot in common, we cannot perform an
            # incremental send.  We must destroy the entire dataset and start
            # over.

            if destination_snapshots and not delete:
                print(
                    f"{destination_filesystem} has no snapshots in common "
                    "with the source, so --delete must be specified to allow "
                    "its snapshots to be destroyed.", file=sys.stderr)
                sys.exit(1)
            if snapshot_filter and not delete_excluded:
                for snapshot in destination_snapshots:
                    if not snapshot_filter.match(snapshot):
                        print(
                            f"{destination_filesystem} has no snapshots in "
                            "common with the source, and has excluded "
                            "snapshots, so --delete-excluded must be "
                            "specified to allow its snapshots to be "
                            "destroyed.", file=sys.stderr)
                        sys.exit(1)

            destroy_command = ["zfs", "destroy", "-r"]
            if dry_run:
                destroy_command.append("-n")
            if verbose:
                destroy_command.append("-v")
            destroy_command.append(destination_filesystem)

            if verbose:
                print(" ".join(destroy_command), file=sys.stderr)
            try:
                destroy_command_output = check_output_ssh(
                    destination_host, destroy_command,
                    stderr=subprocess.STDOUT).decode(term_encoding)
                if verbose:
                    print(destroy_command_output)
            except subprocess.CalledProcessError:
                if verbose:
                    print("Destroy failed.  Dataset may not exist.")

            # We destroyed everything on the destination, so we update the list
            # of destination snapshots for the deletion code.
            destination_snapshots = source_snapshots_filtered

            # Send the first snapshot.
            next_snapshot = source_snapshots_filtered[-1]

        send_command = "zfs send " + " ".join(
            [x for x in zfs_send_options if x != '-t']) + " "
        if dry_run:
            send_command += "-n "
        if verbose:
            send_command += "-v "
        if most_recent_common_snapshot:
            # There is a common snapshot, so send an incremental.
            send_command += (
                f"-{'i' if snapshot_filter else 'I'} "
                f"{source_filesystem}@{most_recent_common_snapshot} ")
        if (not snapshot_filter) and delete:
            send_command += "-R "
        send_command += f"{source_filesystem}@{next_snapshot}"

        if most_recent_common_snapshot:
            recv_command = (
                f"zfs recv {' '.join(zfs_recv_options)} "
                f"{destination_filesystem}")
        else:
            recv_command = (
                f"zfs recv {' '.join(zfs_recv_options)} "
                f"{' '.join(zfs_initial_recv_options)} "
                f"{destination_filesystem}")

        error = transfer(
            source_host, source_filesystem, destination_host,
            destination_filesystem, send_command, recv_command, dry_run,
            term_encoding, verbose)
        if error:
            return (False, successful_transfers, error)

        most_recent_common_snapshot = next_snapshot
        successful_transfers = successful_transfers + 1

    # If there was a snapshot filter, we could not send a replication stream
    # package, so we have to handle deletions ourselves.
    if snapshot_filter and delete:
        delete_snapshots(
            source_snapshots_filtered, destination_host,
            destination_filesystem, destination_snapshots, delete_excluded,
            dry_run, snapshot_filter, term_encoding, verbose)

    return (True, successful_transfers, error)

def main():

    # This seems to be None when running under cron.
    term_encoding = sys.stdout.encoding or "ascii"

    parser = argparse.ArgumentParser(
        description="Replicate ZFS filesystems")
    # rsync style options
    parser.add_argument(
        "--delete", action="store_true",
        help="delete snapshots on the destination that do not exist on the "
             "source")
    parser.add_argument(
        "--delete-before", action="store_true",
        help="delete snapshots before sending new snapshots rather than after")
    parser.add_argument(
        "--delete-excluded", action="store_true",
        help="delete snapshots on the destination excluded by the filter")
    parser.add_argument(
        "-n", "--dry-run", action="store_true",
        help="do not make any changes")
    parser.add_argument(
        "-r", "--recursive", action="store_true",
        help="replicate child datasets recursively")
    parser.add_argument(
        "-v", "--verbose", action="store_true",
        help="print debugging information")
    # zfs_replicate specific options
    parser.add_argument(
        "-u", "--no-mount", action="store_true",
        help="do not mount the received filesystems on the destination")
    parser.add_argument(
        "-o", action="append",
        help="set property on receive side")
    parser.add_argument(
        "-x", action="append",
        help="exclude property on receive side")
    parser.add_argument(
        "--snapshot-filter",
        help="consider only snapshots matching the specified regex")
    # positional arguments
    parser.add_argument(
        "source", nargs=1,
        help="the source dataset or filesystem path to replicate from, with "
             "optional SSH user@host:")
    parser.add_argument(
        "destination", nargs=1,
        help="the source dataset or filesystem path to replicate to, with "
             "optional SSH user@host:")

    args = parser.parse_args()

    source = args.source[0].split(":")
    source_len = len(source)
    if source_len == 1:
        source_host = ""
        source_dataset_root = source[0]
    elif source_len == 2:
        source_host = source[0]
        source_dataset_root = source[1]
    else:
        parser.error("source must be of the form host:dataset or host:path")

    destination = args.destination[0].split(":")
    destination_len = len(destination)
    if destination_len == 1:
        destination_host = ""
        destination_dataset_root = destination[0]
    elif destination_len == 2:
        destination_host = destination[0]
        destination_dataset_root = destination[1]
    else:
        parser.error(
            "destination must be of the form host:dataset or host:path")

    delete = args.delete
    delete_before = args.delete_before
    delete_excluded = args.delete_excluded
    dry_run = args.dry_run
    no_mount = args.no_mount
    recursive = args.recursive
    if args.snapshot_filter:
        snapshot_filter = re.compile(args.snapshot_filter)
    else:
        snapshot_filter = None
    verbose = args.verbose

    if source_dataset_root[0] == "/":
        # Convert the source from a filesystem path to a dataset path.
        try:
            source_dataset_root = check_output_ssh(
                source_host,
                ["zfs", "list", "-H", "-o", "name", "-s", "name",
                 source_dataset_root])
        except subprocess.CalledProcessError:
            print(
                "No ZFS dataset exists at "
                f"{source_host}:{source_dataset_root}.", file=sys.stderr)
            sys.exit(1)
        source_dataset_root = source_dataset_root.decode(term_encoding).strip()

    if destination_dataset_root[0] == "/":
        # Convert the destination from a filesystem path to a dataset path.
        try:
            destination_dataset_root = check_output_ssh(
                destination_host,
                ["zfs", "list", "-H", "-o", "name", "-s", "name",
                 destination_dataset_root])
        except subprocess.CalledProcessError:
            print(
                "Please create a ZFS dataset at "
                f"{destination_host}:{destination_dataset_root}.",
                file=sys.stderr)
            sys.exit(1)
        destination_dataset_root = destination_dataset_root.decode(
            term_encoding).strip()

    if source_dataset_root == destination_dataset_root:
        parser.error("source and destination must be different")

    zfs_send_options = ["-p"]
    for option in ["-c", "-e", "-L", "-t"]:
        if source_host != destination_host:
            if verbose:
                print(f"Checking for zfs send {option} on source: ", end="")
            try:
                check_output_ssh(
                    source_host, ["zfs", "send", option],
                    stderr=subprocess.STDOUT).decode(term_encoding)
            except subprocess.CalledProcessError as e:
                if "invalid option" in e.output.decode(term_encoding):
                    # We got "invalid option", so the option is not supported
                    # on the source.  Skip it.
                    if verbose:
                        print("not supported.")
                    continue
            if verbose:
                print("supported.")

        if verbose:
            print("Checking for zfs send {option} on destination: ", end="")
        try:
            check_output_ssh(
                destination_host, ["zfs", "send", option],
                stderr=subprocess.STDOUT).decode(term_encoding)
        except subprocess.CalledProcessError as e:
            if "invalid option" not in e.output.decode(term_encoding):
                # We did NOT get "invalid option", so the option is supported.
                zfs_send_options.append(option)
                if verbose:
                    print("supported.")
            elif verbose:
                print("not supported.")

    zfs_recv_options = ["-F"]
    if args.o:
        for prop in args.o:
            zfs_recv_options.append("-o")
            zfs_recv_options.append(prop)
    if args.x:
        for prop in args.x:
            zfs_recv_options.append("-x")
            zfs_recv_options.append(prop)
    if verbose:
        zfs_recv_options.append("-v")
    if source_host != destination_host:
        if verbose:
            print("Checking for zfs recv -s on destination: ", end="")
        try:
            check_output_ssh(
                destination_host, ["zfs", "recv", "-s"],
                stderr=subprocess.STDOUT).decode(term_encoding)
        except subprocess.CalledProcessError as e:
            if "invalid option" not in e.output.decode(term_encoding):
                # We did NOT get "invalid option", so the option is supported.
                zfs_recv_options.append("-s")
                if verbose:
                    print("supported.")
            elif verbose:
                print("not supported.")

    if not recursive:
        source_filesystems = [source_dataset_root]
    else:
        # Get a list of local filesystems to sync.
        source_filesystems = check_output_ssh(
            source_host,
            ["zfs", "list", "-Hr", "-t", "filesystem", "-o", "name", "-s",
             "name", source_dataset_root]).decode(term_encoding).split("\n")

    pattern_filesystem = re.compile(r"^" + source_dataset_root + "(/.+|$)")
    for source_filesystem in source_filesystems:
        if not recursive:
            destination_filesystem = destination_dataset_root
        else:
            match_filesystem = pattern_filesystem.match(source_filesystem)
            if not match_filesystem:
                continue
            destination_filesystem = destination_dataset_root + \
                match_filesystem.groups()[0]

        while True:
            (success, successful_transfers, error) = replicate(
                source_host, source_filesystem,
                destination_host, destination_filesystem,
                delete, delete_before, delete_excluded, dry_run, no_mount,
                snapshot_filter, term_encoding, verbose, zfs_send_options,
                zfs_recv_options)
            if success:
                # We succeeded.
                break
            if not dry_run and successful_transfers > 0:
                # We transferred at least one snapshot, but failed to finish.
                # Try again.
                if verbose:
                    print(error, file=sys.stderr)
                    print("Retrying...")
                continue
            # We failed to transfer any snapshots.  Stop.
            print(error, file=sys.stderr)
            sys.exit(1)

if __name__ == "__main__":
    main()
